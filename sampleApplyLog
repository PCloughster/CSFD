[0m[1mdata.aws_ami.amazon_linux_23: Reading...[0m[0m
[0m[1mdata.aws_ami.amazon_linux_23: Read complete after 1s [id=ami-08c60224b47a6fc12][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # aws_instance.app_server[0m will be created
[0m  [32m+[0m[0m resource "aws_instance" "app_server" {
      [32m+[0m[0m ami                                  = "ami-08c60224b47a6fc12"
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m associate_public_ip_address          = (known after apply)
      [32m+[0m[0m availability_zone                    = (known after apply)
      [32m+[0m[0m cpu_core_count                       = (known after apply)
      [32m+[0m[0m cpu_threads_per_core                 = (known after apply)
      [32m+[0m[0m disable_api_stop                     = (known after apply)
      [32m+[0m[0m disable_api_termination              = (known after apply)
      [32m+[0m[0m ebs_optimized                        = (known after apply)
      [32m+[0m[0m get_password_data                    = false
      [32m+[0m[0m host_id                              = (known after apply)
      [32m+[0m[0m host_resource_group_arn              = (known after apply)
      [32m+[0m[0m iam_instance_profile                 = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_initiated_shutdown_behavior = (known after apply)
      [32m+[0m[0m instance_lifecycle                   = (known after apply)
      [32m+[0m[0m instance_state                       = (known after apply)
      [32m+[0m[0m instance_type                        = "t2.micro"
      [32m+[0m[0m ipv6_address_count                   = (known after apply)
      [32m+[0m[0m ipv6_addresses                       = (known after apply)
      [32m+[0m[0m key_name                             = "CSFD"
      [32m+[0m[0m monitoring                           = (known after apply)
      [32m+[0m[0m outpost_arn                          = (known after apply)
      [32m+[0m[0m password_data                        = (known after apply)
      [32m+[0m[0m placement_group                      = (known after apply)
      [32m+[0m[0m placement_partition_number           = (known after apply)
      [32m+[0m[0m primary_network_interface_id         = (known after apply)
      [32m+[0m[0m private_dns                          = (known after apply)
      [32m+[0m[0m private_ip                           = (known after apply)
      [32m+[0m[0m public_dns                           = (known after apply)
      [32m+[0m[0m public_ip                            = (known after apply)
      [32m+[0m[0m secondary_private_ips                = (known after apply)
      [32m+[0m[0m security_groups                      = (known after apply)
      [32m+[0m[0m spot_instance_request_id             = (known after apply)
      [32m+[0m[0m subnet_id                            = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "csfd-test-react"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "csfd-test-react"
        }
      [32m+[0m[0m tenancy                              = (known after apply)
      [32m+[0m[0m user_data                            = (sensitive value)
      [32m+[0m[0m user_data_base64                     = (known after apply)
      [32m+[0m[0m user_data_replace_on_change          = false
      [32m+[0m[0m vpc_security_group_ids               = (known after apply)

      [32m+[0m[0m network_interface {
          [32m+[0m[0m delete_on_termination = false
          [32m+[0m[0m device_index          = 0
          [32m+[0m[0m network_card_index    = 0
          [32m+[0m[0m network_interface_id  = (known after apply)
        }
    }

[1m  # aws_network_interface.main[0m will be created
[0m  [32m+[0m[0m resource "aws_network_interface" "main" {
      [32m+[0m[0m arn                       = (known after apply)
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m interface_type            = (known after apply)
      [32m+[0m[0m ipv4_prefix_count         = (known after apply)
      [32m+[0m[0m ipv4_prefixes             = (known after apply)
      [32m+[0m[0m ipv6_address_count        = (known after apply)
      [32m+[0m[0m ipv6_address_list         = (known after apply)
      [32m+[0m[0m ipv6_address_list_enabled = false
      [32m+[0m[0m ipv6_addresses            = (known after apply)
      [32m+[0m[0m ipv6_prefix_count         = (known after apply)
      [32m+[0m[0m ipv6_prefixes             = (known after apply)
      [32m+[0m[0m mac_address               = (known after apply)
      [32m+[0m[0m outpost_arn               = (known after apply)
      [32m+[0m[0m owner_id                  = (known after apply)
      [32m+[0m[0m private_dns_name          = (known after apply)
      [32m+[0m[0m private_ip                = (known after apply)
      [32m+[0m[0m private_ip_list           = (known after apply)
      [32m+[0m[0m private_ip_list_enabled   = false
      [32m+[0m[0m private_ips               = (known after apply)
      [32m+[0m[0m private_ips_count         = (known after apply)
      [32m+[0m[0m security_groups           = (known after apply)
      [32m+[0m[0m source_dest_check         = true
      [32m+[0m[0m subnet_id                 = "subnet-0ecb42a04844714dc"
      [32m+[0m[0m tags                      = {
          [32m+[0m[0m "Name" = "primary-interface"
        }
      [32m+[0m[0m tags_all                  = {
          [32m+[0m[0m "Name" = "primary-interface"
        }
    }

[1m  # aws_security_group.vm[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "vm" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "network rules for VM"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = "csfd-test-react-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # aws_security_group_rule.inbound_http_to_vm[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "inbound_http_to_vm" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m description              = "Allow http protocol inbound from any IP"
      [32m+[0m[0m from_port                = 80
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 80
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # aws_security_group_rule.inbound_https_to_vm[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "inbound_https_to_vm" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m description              = "Allow https protocol inbound from any IP"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # aws_security_group_rule.inbound_ssh_to_vm[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "inbound_ssh_to_vm" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "209.35.84.2/32",
        ]
      [32m+[0m[0m description              = "Allow ssh protocol inbound from any IP"
      [32m+[0m[0m from_port                = 22
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 22
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # aws_security_group_rule.vm_outbound_any[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "vm_outbound_any" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m description              = "Allow VM to connect out to any IP on any port"
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "egress"
    }

[1m  # random_password.db_pass[0m will be created
[0m  [32m+[0m[0m resource "random_password" "db_pass" {
      [32m+[0m[0m bcrypt_hash      = (sensitive value)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m length           = 16
      [32m+[0m[0m lower            = true
      [32m+[0m[0m min_lower        = 0
      [32m+[0m[0m min_numeric      = 0
      [32m+[0m[0m min_special      = 0
      [32m+[0m[0m min_upper        = 0
      [32m+[0m[0m number           = true
      [32m+[0m[0m numeric          = true
      [32m+[0m[0m override_special = "!#$%&*()-_=+[]{}<>:?"
      [32m+[0m[0m result           = (sensitive value)
      [32m+[0m[0m special          = true
      [32m+[0m[0m upper            = true
    }

[1mPlan:[0m 8 to add, 0 to change, 0 to destroy.
[0m[0m[1mrandom_password.db_pass: Creating...[0m[0m
[0m[1mrandom_password.db_pass: Creation complete after 0s [id=none][0m
[0m[1maws_security_group.vm: Creating...[0m[0m
[0m[1maws_security_group.vm: Creation complete after 2s [id=sg-015668d3762947f14][0m
[0m[1maws_security_group_rule.inbound_ssh_to_vm: Creating...[0m[0m
[0m[1maws_security_group_rule.vm_outbound_any: Creating...[0m[0m
[0m[1maws_security_group_rule.inbound_http_to_vm: Creating...[0m[0m
[0m[1maws_security_group_rule.inbound_https_to_vm: Creating...[0m[0m
[0m[1maws_network_interface.main: Creating...[0m[0m
[0m[1maws_security_group_rule.inbound_ssh_to_vm: Creation complete after 1s [id=sgrule-437951312][0m
[0m[1maws_network_interface.main: Creation complete after 1s [id=eni-0f81f70404093c62d][0m
[0m[1maws_instance.app_server: Creating...[0m[0m
[0m[1maws_security_group_rule.inbound_http_to_vm: Creation complete after 2s [id=sgrule-1086273645][0m
[0m[1maws_security_group_rule.vm_outbound_any: Creation complete after 3s [id=sgrule-1903980091][0m
[0m[1maws_security_group_rule.inbound_https_to_vm: Creation complete after 3s [id=sgrule-1584566073][0m
[0m[1maws_instance.app_server: Still creating... [10s elapsed][0m[0m
[0m[1maws_instance.app_server: Still creating... [20s elapsed][0m[0m
[0m[1maws_instance.app_server: Still creating... [30s elapsed][0m[0m
[0m[1maws_instance.app_server: Creation complete after 35s [id=i-026a98902219429ed][0m
[0m[1m[32m
Apply complete! Resources: 8 added, 0 changed, 0 destroyed.
[0m
